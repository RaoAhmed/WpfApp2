<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#DBBDF3"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#DBBDF3"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

    <Style x:Key="RadioButton1" TargetType="{x:Type RadioButton}">
        <!--<Setter Property="Margin" Value="0,0,0,10"/>-->
        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="border" CornerRadius="10" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2" SnapsToDevicePixels="true" Padding="5">
                        <Grid Margin="10,0" x:Name="grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse Grid.Column="0" Width="12" Height="12" Fill="#D9D9D9" SnapsToDevicePixels="True" Margin="0,0,10,0"/>
                            <ContentPresenter Grid.Column="1" x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Red" />-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="MediumPurple"/>
                            <!--<Setter Property="BorderThickness" TargetName="border" Value="2" />-->
                            <!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Red" />-->
                        </Trigger>
                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White" />
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>-->
                        <!--<Trigger Property="IsChecked" Value="false">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                        </Trigger>-->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Custom Style for RadioButton -->
    <Style TargetType="RadioButton" x:Key="CustomRadioButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <StackPanel Orientation="Horizontal">
                        <!-- Custom Circle -->
                        <Border Width="20" Height="20" CornerRadius="10"
                                BorderBrush="Gray" BorderThickness="2"
                                Background="White">
                            <Ellipse Fill="Transparent" x:Name="Dot" Width="10" Height="10" />
                        </Border>
                        <!-- Label -->
                        <ContentPresenter Margin="5,0,0,0" VerticalAlignment="Center" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <!-- Trigger for Checked State -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Dot" Property="Fill" Value="DodgerBlue" />
                        </Trigger>
                        <!-- Trigger for Disabled State -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>